@model List<ASP.NET_Project.Models.User>


@{
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

@section Title {
Admin User
}

<div class="header-color"></div>
<div class="card-container">
<div class="project-container users-container">
    <div class="scroll-container">
        <table id="example" class="table table-striped" style="width:100%">
            <thead>
                <tr>
                    <th>#</th>
                    <th style="width: 5vw;">Name</th>
                    <th>Email</th>
                    <th>Password</th>
                    <th>Role</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Count; i++)
                {
                    var user = Model[i];
                    <tr>
                        <td style="text-align: center;">@(i + 1)</td>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>@user.Password</td>
                        <td>@user.Role.RoleName</td>
                        <td>@(user.IsActive ? "Active" : "Inactive")</td>
                        <td>
                            <div class="btn-group">
                                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                    Action
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item edit-user-btn" href="#" data-bs-toggle="modal"
                                            data-bs-target=".bd-example-modal-lg" data-id="@user.Id"
                                            data-name="@user.UserName" data-role-id="@user.RoleId"
                                            data-status="@user.IsActive">Edit</a></li>
                                    <li><a class="dropdown-item" href="#">Delete</a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
</div>

<!-- Modal -->
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg custom-modal-size">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm" method="post" action="/Home/UpdateUser">
                    <!-- Ensure the action points to your UpdateUser method -->
                    <input type="hidden" id="editUserId" name="Id" value="">

                    <div class="flx-row">
                        <div class="">
                            <label for="editUserName">Name:</label><br>
                            <input type="text" id="editUserName" name="UserName">
                        </div>
                        <div class="" style="margin-left: 1rem;">
                            <label for="editUserRole">Role:</label><br>
                            <select name="RoleId" id="editUserRole">
                                <option value="2">User</option>
                                <option value="3">Project Manager</option>
                            </select>
                        </div>
                    </div>

                    <div class="flx-row">
                        <div class="">
                            <label for="editUserStatus">Status</label> <br>
                            <select name="IsActive" id="editUserStatus">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </select>


                        </div>
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" form="editUserForm" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script src="
https://cdn.jsdelivr.net/npm/sweetalert2@11.14.1/dist/sweetalert2.all.min.js
"></script>
<script>
    // Handle edit button click
    // Handle edit button click
    document.querySelectorAll('.edit-user-btn').forEach(button => {
        button.addEventListener('click', function () {
            // Fetch user data from data attributes
            var userId = this.getAttribute('data-id');
            var userName = this.getAttribute('data-name');
            var roleId = this.getAttribute('data-role-id');
            var isActive = this.getAttribute('data-status') === "true"; // Convert to boolean

            // Set modal input values with fetched data
            document.getElementById('editUserId').value = userId;
            document.getElementById('editUserName').value = userName;

            // Set Role dropdown to the correct roleId
            var roleDropdown = document.getElementById('editUserRole');
            for (var i = 0; i < roleDropdown.options.length; i++) {
                if (roleDropdown.options[i].value == roleId) {
                    roleDropdown.options[i].selected = true;
                    break;
                }
            }

            // Set Status dropdown to the correct status (true for Active, false for Inactive)
            var statusDropdown = document.getElementById('editUserStatus');
            statusDropdown.value = isActive.toString(); // Convert boolean to string for dropdown value
        });
    });

document.getElementById('editUserForm').addEventListener('submit', function (event) {
    event.preventDefault();

    const formData = new FormData(this);
    const url = this.action;

    fetch(url, {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === "Error") {
            // Display error message using SweetAlert2
            Swal.fire({
                title: 'Error!',
                html: data.message, // Show error message from the server
                icon: 'error',
                confirmButtonText: 'Ok'
            });
        } else {
            // Display success message using SweetAlert2
            Swal.fire({
                title: 'Success!',
                text: data.message, // Show success message from the server
                icon: 'success',
                confirmButtonText: 'Ok'
            }).then(() => {
                location.reload(); // Reload the page after success
            });
        }
    })
    .catch(error => {
        // Handle any unexpected errors
        Swal.fire({
            title: 'Error!',
            html: error.message,
            icon: 'error',
            confirmButtonText: 'Ok'
        });
    });
});





document.getElementById('adminUser').classList.add("active");


</script>
