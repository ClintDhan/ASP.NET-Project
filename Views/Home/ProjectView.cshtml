


@{
    Layout = (bool)ViewData["IsAdmin"] ? "~/Views/Shared/AdminLayout.cshtml" : "~/Views/Shared/UserLayout.cshtml";
}

@section Title {
    View Project
}

<div class="header-color"></div>
<div class="card-container">
    <div class="project-container users-container scroll-container" style="max-height: 70vh; padding: 1rem; margin-top: 5vh;">
        <div class="project-grid">
            <div>
                <label for="">Project Name:</label> <br>
                <p>@Model.ProjectName</p>
            </div>
            <div>
                <label for="">Project Manager:</label>
                <p>@Model.ProjectManager</p>
            </div>
            <div class="to-expand">
                <label for="">Project Members:</label>
                <p>@string.Join(", ", Model.ProjectMembers)</p>
            </div>
            <div>
                <label for="">Start Date:</label>
                <p>@Model.StartDate.ToString("MMMM dd, yyyy")</p>
            </div>
            <div>
                <label for="">Due Date:</label>
                <p>@Model.DueDate.ToString("MMMM dd, yyyy")</p>
            </div>
            <div class="to-expand-desc">
                <label for="">Description:</label>
                <p>@Model.Description</p>
            </div>
        </div>

        <!-- Tasks Table -->
        <div class="table-container">
            <div class="table-header">
                <p>Tasks</p>
            </div>
            <table id="example3" class="table table-striped" style="width:100%">
                <thead>
                    <tr>
                        <th style="text-align: center;">#</th>
                        <th style="text-align: center;">Task Name</th>
                        <th style="text-align: center;">Assigned To</th>
                        <th style="text-align: center;">Status</th>
                        <th style="text-align: center;">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in Model.Tasks)
                    {
                        <tr>
                            <td style="text-align: center;">@task.Id</td>
                            <td style="text-align: center;">@task.Name</td>
                            <td style="text-align: center;">@task.AssignedTo?.UserName</td>
                            <td style="text-align: center;">@task.Status</td>
                            <td style="text-align: center;">
                                    <button class="btn btn-success" data-task-id="@task.Id"><i class="bi bi-check-lg"></i></button>
    <button class="btn btn-danger" data-task-id="@task.Id"><i class="bi bi-arrow-bar-left"></i></button>


                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

       <!-- Progress Table -->
<div class="table-container">
    <div class="table-header">
        <p>Progress</p>
       @if (Model.Status == ProjectStatus.InProgress)
{
    <!-- Allow adding progress if the project is in progress -->
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProgressModal">Add Progress</button>
}
else if (Model.Status == ProjectStatus.Overdue)
{
    <!-- Show SweetAlert2 if the project is overdue -->
    <button class="btn btn-danger" onclick="showOverdueAlert()">Add Progress</button>
}
else if (Model.Status == ProjectStatus.Completed)
{
    <!-- Show SweetAlert2 if the project is completed -->
    <button class="btn btn-warning" onclick="showCompletedAlert()">Add Progress</button>
}


    </div>
    <table id="example2" class="table table-striped" style="width:100%">
        <thead>
            <tr>
                <th style="text-align: center;">#</th>
                <th style="text-align: center;">File</th>
                <th style="text-align: center;">By</th>
                <th style="text-align: center;">Description</th>
                <th style="text-align: center;">Date</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Progresses != null && Model.Progresses.Count > 0)
            {
                int index = 1;
                foreach (var progress in Model.Progresses)
                {
                    <tr>
                        <td style="text-align: center;">@index</td>
                        <td style="text-align: center;">
                            @if (!string.IsNullOrEmpty(progress.FileName))
                            {
                                <a href="@Url.Action("DownloadFile", "Home", new { id = progress.Id })">@progress.FileName</a>
                            }
                            else
                            {
                                <span>No file</span>
                            }
                        </td>
                        <td style="text-align: center;">@progress.User.UserName</td> <!-- Displaying UserName -->
                        <td style="text-align: center;">@progress.Description</td>
                        <td style="text-align: center;">@progress.Date.ToString("yyyy-MM-dd")</td>
                    </tr>
                    index++;
                }
                }
        </tbody>
    </table>
</div>



<!-- Add Progress Modal -->
<div class="modal fade" id="addProgressModal" tabindex="-1" role="dialog" aria-labelledby="addProgressLabel"
     aria-hidden="true">
    <div class="modal-dialog modal-lg custom-modal-size">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProgressLabel">Add Progress</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="/Home/CreateProgress" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="flx-row">
                        <div class="mb-3">
                            <label for="taskId">Task:</label>
                            <select id="taskId" name="TaskId" class="form-select" required>
                                <option value="">Select a task</option>
                                @foreach (var task in Model.Tasks)
                                {
                                    <option value="@task.Id">@task.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="flx-row">
                        <div class="mb-3">
                            <label for="file">File:</label><br>
                            <input type="file" id="file" name="progressFile" accept=".pdf,.png,.jpg,.jpeg">
                        </div>
                        <div style="margin-left: 1rem;" class="mb-3">
                            <label for="date">Date:</label><br>
                            <input type="date" id="date" name="Date" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                        </div>
                    </div>

                    <div class="flx-row">
                        <div class="mb-3">
                            <label for="description">Description:</label>
                            <textarea class="form-control text-area-desc" id="description" name="Description" rows="3" required></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>


<script src="
https://cdn.jsdelivr.net/npm/sweetalert2@11.14.1/dist/sweetalert2.all.min.js
"></script>
@section Scripts {
    <script>
        document.querySelector('.collapse-btn').classList.add("active");
        document.querySelector('.bi-send-fill').style.color = "white";
        document.querySelector('.collapse-btn').style.color = "white";

          // Function to update task status via AJAX
   function updateTaskStatus(taskId, status) {
    $.ajax({
        url: '@Url.Action("UpdateTaskStatus", "Home")',
        type: 'POST',
        data: { taskId: taskId, status: status },
        success: function(response) {
            if (response.success) {
                Swal.fire('Success', 'Task status updated!', 'success');
                setTimeout(function() {
                    location.reload(); // Reload the page after 2.5 seconds
                }, 2500); // 2.5 seconds delay
            } else {
                Swal.fire('Error', 'Failed to update task status.', 'error');
            }
        },
        error: function() {
            Swal.fire('Error', 'An error occurred while updating status.', 'error');
        }
    });
}

// Event listeners for success and danger buttons
document.querySelectorAll('.btn-success').forEach(button => {
    button.addEventListener('click', function() {
        const taskId = this.getAttribute('data-task-id'); // Get the task ID from data attribute
        updateTaskStatus(taskId, 'Completed');
    });
});

document.querySelectorAll('.btn-danger').forEach(button => {
    button.addEventListener('click', function() {
        const taskId = this.getAttribute('data-task-id'); // Get the task ID from data attribute
        updateTaskStatus(taskId, 'InProgress');
    });
});

   function showOverdueAlert() {
        Swal.fire({
            icon: 'error',
            title: 'Project Overdue',
            text: 'The project is overdue, you cannot add progress!',
            confirmButtonText: 'OK'
        });
    }

    // Function to show the alert for completed projects
    function showCompletedAlert() {
        Swal.fire({
            icon: 'info',
            title: 'Project Completed',
            text: 'The project is already completed, no more progress can be added!',
            confirmButtonText: 'OK'
        });
    }

    </script>

    
}
