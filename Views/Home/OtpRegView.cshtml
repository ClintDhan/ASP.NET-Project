@{
    ViewBag.Title = "Verify OTP";
}


@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-danger">
        @ViewBag.ErrorMessage
    </div>
}

@if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
{
    <div class="alert alert-success">
        @ViewBag.SuccessMessage
    </div>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify OTP</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
        rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="~/css/style.css">
</head>

<body>

    <main class="form-main container">
        <div class="img-gif">
            <img src="~/img/3d-isometric-vr-game-headset-for-playing-video-games.gif" alt="">
        </div>
        <div class="form-sigin">
            <h2 class="pt-5">Enter OTP</h2>
            <form action="@Url.Action("ValidateRegistrationOtp", "Home")" method="post" id="otpForm">
                <input type="text" name="otpInput" id="otpInput" required> <br>
                <input type="submit" value="SUBMIT" style="margin-top: 2rem;">
            </form>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.1/dist/sweetalert2.all.min.js"></script>
    <script>
       document.getElementById("otpForm").onsubmit = async function(event) {
            event.preventDefault(); // Prevent the default form submission

            const formData = new FormData(this); // Create a FormData object
            const response = await fetch(this.action, {
                method: "POST",
                body: formData
            });

            const result = await response.json(); // Parse the JSON response

            if (result.success) {
                // Show success message with SweetAlert2
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message,
                    timer: 2000, // Automatically close after 2 seconds
                    timerProgressBar: true,
                    didClose: () => {
                        // Redirect to login page after 2 seconds
                        window.location.href = '@Url.Action("Login", "Home")';
                    }
                });
            } else {
                // Show error message with SweetAlert2
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: result.message,
                    confirmButtonText: 'Ok'
                });
            }
        };
    </script>
</body>

</html>
